<tal:include metal:use-macro="load: spriteset_templates.pynml" />

<tal:sprites_random_variations repeat="variation_num python:range(ship.num_unique_spritesheet_suffixes)">
    spriteset(${ship.id}_ss_${variation_num}_empty, "${global_constants.graphics_path}${ship.id}_${variation_num}.png") {
      spriteset_template_empty_${ship.id}(10)
    }

    <tal:cargo_variants repeat="cargo_variant_num python:range(ship.visible_cargo.num_cargo_sprite_variants)">
        spriteset(${ship.id}_ss_${variation_num}_${cargo_variant_num}_part_load, "${global_constants.graphics_path}${ship.id}_${variation_num}.png") {
          spriteset_template_part_load_${ship.id}(${cargo_variant_num * 200} + 110)
        }
        spriteset(${ship.id}_ss_${variation_num}_${cargo_variant_num}_full_load, "${global_constants.graphics_path}${ship.id}_${variation_num}.png") {
          spriteset_template_full_load_${ship.id}(${cargo_variant_num * 200} + 210)
        }

        spritegroup ${ship.id}_sg_loading_${variation_num}_${cargo_variant_num} {
            loaded:  [
                ${ship.id}_ss_${variation_num}_${cargo_variant_num}_part_load,
            ];
            loading: [
                ${ship.id}_ss_${variation_num}_${cargo_variant_num}_part_load,
            ];
        }

        spritegroup ${ship.id}_sg_loaded_${variation_num}_${cargo_variant_num} {
            loaded:  [
                ${ship.id}_ss_${variation_num}_${cargo_variant_num}_full_load,
            ];
            loading: [
                ${ship.id}_ss_${variation_num}_${cargo_variant_num}_full_load,
            ];
        }

        <!--! this switch needs to be kept at parity with the equivalent switches in other vehicle templates -->
        switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_percent_loaded_${variation_num}_${cargo_variant_num}, cargo_count*100/cargo_capacity) {
                0: return ${ship.id}_ss_${variation_num}_empty;
                1..99: return ${ship.id}_sg_loading_${variation_num}_${cargo_variant_num};
            return ${ship.id}_sg_loaded_${variation_num}_${cargo_variant_num};
        }
    </tal:cargo_variants>

    <tal:cargo_random_switches repeat="mapping ship.visible_cargo.cargo_row_map.items()">
        <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
            random_switch (FEAT_SHIPS, ${ship.get_nml_expression_for_cargo_variant_random_switch(variation_num, mapping[0])}) {
                <tal:random_graphics_variations repeat="spriterow_num mapping[1]">
                    1: return ${ship.id}_switch_graphics_percent_loaded_${variation_num}_${spriterow_num};
                </tal:random_graphics_variations>
            }
        </tal:exclude_default_cargo>
    </tal:cargo_random_switches>

    random_switch (FEAT_SHIPS, ${ship.get_nml_expression_for_cargo_variant_random_switch(variation_num, 'generic_cargos')}) {
        <tal:random_graphics_variations repeat="spriterow_num ship.visible_cargo.generic_rows">
            1: return ${ship.id}_switch_graphics_percent_loaded_${variation_num}_${spriterow_num};
        </tal:random_graphics_variations>
    }

    switch (FEAT_SHIPS, SELF, ${ship.id}_switch_graphics_${variation_num}, cargo_type_in_veh) {
        <tal:cargos repeat="mapping ship.visible_cargo.cargo_row_map.items()">
            <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
                ${mapping[0]}: return ${ship.id}_switch_graphics_${variation_num}_${mapping[0]};
            </tal:exclude_default_cargo>
        </tal:cargos>
        return ${ship.id}_switch_graphics_${variation_num}_generic_cargos;
    }
</tal:sprites_random_variations>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

// buy menu graphics
spriteset(${ship.id}_ss_purchase, "${global_constants.graphics_path}${ship.id}_0.png") {
  spriteset_template_purchase_${ship.id}()
}

spritegroup ${ship.id}_sg_purchase {
    loaded:  [
        ${ship.id}_ss_purchase,
    ];
    loading: [
        ${ship.id}_ss_purchase,
    ];
}

<tal:include metal:use-macro="load: speed_switches.pynml" />

<tal:include metal:use-macro="load: capacity_switches.pynml" />

<tal:include metal:use-macro="load: ship_properties.pynml" />

